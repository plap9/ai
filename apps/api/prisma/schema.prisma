generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workspace {
  id          String    @id @default(uuid())
  name        String
  description String?   @db.Text
  ownerId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime? // +++ Soft Delete

  members       WorkspaceMember[]
  documents     Document[]
  integrations  Integration[]
  conversations Conversation[]
  tasks         Task[]

  @@index([name])
  @@index([ownerId])
}

model WorkspaceMember {
  id          String        @id @default(uuid())
  workspaceId String
  userId      String
  role        WorkspaceRole @default(MEMBER)
  createdAt   DateTime      @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
  @@index([workspaceId])
  @@index([userId])
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workspaces     WorkspaceMember[]
  messages       Message[]
  notifications  Notification[]
  assignedTasks  Task[]           @relation("AssignedTasks") // +++ Relation for assigned tasks
}

model Document {
  id        String    @id @default(uuid())
  title     String
  content   String?   @db.Text
  type      String
  metadata  Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // +++ Soft Delete

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  embeddings Embedding[]
}

model Embedding {
  id         String   @id @default(uuid())
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  // TODO: Enable after installing pgvector extension
  // vector     Unsupported("vector(1024)")
  vectorData String?  // Temporary placeholder for vector data
  metadata   Json?
  createdAt  DateTime @default(now())
}

model Conversation {
  id        String    @id @default(uuid())
  title     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // +++ Soft Delete

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  messages Message[]
}

model Message {
  id        String   @id @default(uuid())
  content   String   @db.Text
  role      String   // "user" or "assistant"
  metadata  Json?
  createdAt DateTime @default(now())

  userId         String
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt]) // +++ Your suggested index
}

model Task {
  id          String       @id @default(uuid())
  title       String
  description String?      @db.Text
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?    // +++ Soft Delete

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  // +++ Task Assignee
  assigneeId String?
  assignee   User?   @relation("AssignedTasks", fields: [assigneeId], references: [id], onDelete: SetNull)

  @@index([workspaceId, status]) // +++ Your suggested index
  @@index([assigneeId])
}

model Notification {
    id        String   @id @default(uuid())
    content   String
    isRead    Boolean  @default(false)
    type      String   // e.g., 'new_task', 'mention'
    createdAt DateTime @default(now())

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId, isRead]) // +++ Your suggested index
}

model Integration {
  id        String   @id @default(uuid())
  type      String   // e.g., "google_drive", "slack"

  // +++ IMPORTANT: Encrypt this field at the application level before saving
  config    Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  CANCELED
}

enum TaskPriority {
    LOW
    MEDIUM
    HIGH
    URGENT
}
